include: "../snakemake/conf_submission.sk"

# ==========================================================================
#                             EGAsubmitter
# ==========================================================================
# This file is part of EGAsubmitter.
#
# EGAsubmitter is Free Software: you can redistribute it and/or modify it
# under the terms found in the LICENSE.rst file distributed
# together with this file.
#
# EGAsubmitter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ==========================================================================
# Author: Marco Viviani <marco.viviani@ircc.it>
# ==========================================================================
#                         Snakefile_get-EGA_IDs
# This snakemake is used to recover EGA specific ID given after the final
# submission: at the end a unique tab file is created with every ID
# ==========================================================================

rule all:
    input: USER+"/everything_IDs.tsv"

rule samples:
    input: token=ancient("dataset/SessionToken"), idSample=SAMPLES_PATH+"/IDs/{sample}_ID"
    params: path=EGA_URL+"/samples"
    output: egaid=EGAID_STORE+"/samples/{sample}_EGAID.json"
    shell:
        """
            token=$(cat {input.token})
            path={params.path}
            curl -H "X-Token: $token" -X GET $path/$(cat {input.idSample}) > {output.egaid}
        """

rule runs:
    input: expand(EGAID_STORE+"/samples/{sample}_EGAID.json", sample=SAMPLES), token=ancient("dataset/SessionToken"), idRun=RUNS_PATH+"/IDs/Run_{sample}_ID"
    params: path=EGA_URL+"/runs"
    output: egaid=EGAID_STORE+"/runs/Run_{sample}_EGAID.json"
    shell:
        """
            token=$(cat {input.token})
            path={params.path}
            curl -H "X-Token: $token" -X GET $path/$(cat {input.idRun}) > {output.egaid}
        """

rule others:
    input: expand(EGAID_STORE+"/samples/{sample}_EGAID.json", sample=SAMPLES),  expand(EGAID_STORE+"/runs/Run_{sample}_EGAID.json", sample=SAMPLES), token=ancient("dataset/SessionToken"), id=ancient(SUBMISSION_PATH+"/SubmissionID")
    params: path=EGA_URL
    output: dac=EGAID_STORE+"/DAC_EGAID.json", exp=EGAID_STORE+"/Experiment_EGAID.json", study=EGAID_STORE+"/Study_EGAID.json", pol=EGAID_STORE+"/Policy_EGAID.json", dat=EGAID_STORE+"/Dataset_EGAID.json"
    shell:
        """
            token=$(cat {input.token})
            path={params.path}
            curl -H "X-Token: $token" -X GET $path/submissions/$(cat {input.id})/dacs?status=SUBMITTED > {output.dac}
            curl -H "X-Token: $token" -X GET $path/submissions/$(cat {input.id})/experiments?status=SUBMITTED > {output.exp}
            curl -H "X-Token: $token" -X GET $path/submissions/$(cat {input.id})/studies?status=SUBMITTED > {output.study}
            curl -H "X-Token: $token" -X GET $path/submissions/$(cat {input.id})/policies?status=SUBMITTED > {output.pol}
            curl -H "X-Token: $token" -X GET $path/submissions/$(cat {input.id})/datasets?status=SUBMITTED > {output.dat}
        """

### At the end, a single file is created with all the associated IDs
rule everything:
    input: dac=EGAID_STORE+"/DAC_EGAID.json", study=EGAID_STORE+"/Study_EGAID.json", pol=EGAID_STORE+"/Policy_EGAID.json", dat=EGAID_STORE+"/Dataset_EGAID.json"
    params: samples=EGAID_STORE+"/samples", runs=EGAID_STORE+"/runs"
    output: df=USER+"/everything_IDs.tsv"
    run:
        import os, json, pandas as pd, numpy as np
        df = pd.DataFrame(columns=['sample_alias', 'sample_egaAccessionId'])
        dfrun = pd.DataFrame(columns=['sample_alias', 'run_egaAccessionId'])
        for filename in os.listdir(params.samples):
            if filename.endswith(".json"):
                with open(os.path.join(params.samples,filename)) as f:
                    # print(f)
                    what = json.load(f)
                    alias = what['response']['result'][0]['alias']
                    ega = what['response']['result'][0]['egaAccessionId']
                    df = df.append({'sample_alias': alias, 'sample_egaAccessionId': ega}, ignore_index=True)
        for filename in os.listdir(params.runs):
            if filename.endswith(".json"):
                with open(os.path.join(params.runs,filename)) as f:
                    what = json.load(f)
                    sample = what['response']['result'][0]['sampleAlias']
                    ega = what['response']['result'][0]['egaAccessionId']
                    dfrun = dfrun.append({'sample_alias': sample, 'run_egaAccessionId': ega}, ignore_index=True)
        df = df.merge(right=dfrun, how='inner', on='sample_alias')
        dfother = pd.DataFrame(columns=['egaAccessionId_dac', 'egaAccessionId_study', 'egaAccessionId_policy', 'egaAccessionId_dataset'], index=np.arange((len(df.index))))
        with open(input.dac) as d, open(input.study) as s, open(input.pol) as p, open(input.dat) as dat:
            dac = json.load(d)
            study = json.load(s)
            pol = json.load(p)
            dat = json.load(dat)
            egaID_dac = dac['response']['result'][0]['egaAccessionId']
            egaID_study = study['response']['result'][0]['egaAccessionId']
            egaID_policy = pol['response']['result'][0]['egaAccessionId']
            egaID_dataset = dat['response']['result'][0]['egaAccessionId']
        dfother['egaAccessionId_dac'] = egaID_dac
        dfother['egaAccessionId_study'] = egaID_study
        dfother['egaAccessionId_policy'] = egaID_policy
        dfother['egaAccessionId_dataset'] = egaID_dataset
        final = pd.concat([df, dfother], axis=1)
        final.to_csv(output.df, sep='\t', header=True, index=False)
